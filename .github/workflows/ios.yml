name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  XCODE_VERSION: '16.4.0'
  IOS_VERSION: '18.5'

jobs:
  # MARK: - Build & Test Job
  build-and-test:
    name: Build & Test
    runs-on: macos-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: Install SwiftLint
        run: |
          gem install cocoapods
          gem install xcpretty
          brew install swiftlint
          
      - name: Cache Xcode Derived Data
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-
            
      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
            
      - name: Install Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi
          
      - name: SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
          
      - name: Build Project
        run: |
          xcodebuild clean build \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
          
      - name: Run Unit Tests
        run: |
          xcodebuild test \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
            
      - name: Generate Code Coverage Report
        run: |
          xcrun xccov view --report --json \
            ~/Library/Developer/Xcode/DerivedData/OMOMoney-*/Logs/Test/*.xcresult \
            > coverage.json
            
      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.json
          flags: ios
          name: iOS Coverage
          
  # MARK: - UI Tests Job
  ui-tests:
    name: UI Tests
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: Install Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi
          
      - name: Run UI Tests
        run: |
          xcodebuild test \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -only-testing:OMOMoneyUITests \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
            
  # MARK: - Performance Tests Job
  performance-tests:
    name: Performance Tests
    runs-on: macos-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: Install Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi
          
      - name: Run Performance Tests
        run: |
          xcodebuild test \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 16,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -only-testing:OMOMoneyPerformanceTests \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
            
  # MARK: - Code Quality Job
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Code Quality Tools
        run: |
          pip install black flake8 mypy
          
      - name: Check Python Code Quality
        run: |
          # Check for any Python scripts in the project
          if find . -name "*.py" -not -path "./.venv/*" | grep -q .; then
            black --check .
            flake8 .
            mypy .
          else
            echo "No Python files found, skipping Python quality checks"
          fi
          
      - name: Check Swift Code Quality
        run: |
          # This will be handled by SwiftLint in the main job
          echo "Swift code quality checked by SwiftLint in build-and-test job"
          
  # MARK: - Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
  # MARK: - Build Archive Job (Release Only)
  build-archive:
    name: Build Archive
    runs-on: macos-latest
    needs: [build-and-test, ui-tests, performance-tests, code-quality, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          
      - name: Install Dependencies
        run: |
          if [ -f "Podfile" ]; then
            pod install
          fi
          
      - name: Build Archive
        run: |
          xcodebuild archive \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -archivePath OMOMoney.xcarchive \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
          
      - name: Upload Archive Artifact
        uses: actions/upload-artifact@v3
        with:
          name: OMOMoney-Archive
          path: OMOMoney.xcarchive
          retention-days: 30
          
  # MARK: - Notifications Job
  notifications:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, ui-tests, performance-tests, code-quality, security-scan]
    if: always()
    
    steps:
      - name: Notify on Success
        if: success()
        run: |
          echo "✅ All checks passed successfully!"
          echo "🚀 Ready for deployment"
          
      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Some checks failed"
          echo "🔍 Please review the logs and fix the issues"
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => comment.user.type === 'Bot');
            
            const commentBody = `## 🧪 Test Results
            
            **Build Status:** ${job.status === 'success' ? '✅ Success' : '❌ Failed'}
            
            **Jobs Completed:**
            - ✅ Build & Test: ${needs.build-and-test.result}
            - ✅ UI Tests: ${needs.ui-tests.result}
            - ✅ Performance Tests: ${needs.performance-tests.result}
            - ✅ Code Quality: ${needs.code-quality.result}
            - ✅ Security Scan: ${needs.security-scan.result}
            
            **Coverage:** Available in the build logs
            **Next Steps:** ${job.status === 'success' ? 'Ready for review and merge' : 'Please fix the failing tests'}
            
            ---
            *This comment was automatically generated by GitHub Actions*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody,
              });
            }
