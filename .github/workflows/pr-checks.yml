name: Pull Request Checks

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]

env:
  XCODE_VERSION: '16.4.0'
  IOS_VERSION: '18.5'

jobs:
  # MARK: - Quick Build Check
  quick-build:
    name: Quick Build Check
    runs-on: macos-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Cache Xcode Derived Data
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-
            
      - name: Build Project
        run: |
          xcodebuild clean build \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
            
  # MARK: - Unit Tests (Fast)
  unit-tests:
    name: Unit Tests
    runs-on: macos-latest
    needs: quick-build
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}
          
      - name: Cache Xcode Derived Data
        uses: actions/cache@v3
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-${{ hashFiles('**/*.xcodeproj') }}
          restore-keys: |
            ${{ runner.os }}-xcode-${{ env.XCODE_VERSION }}-derived-data-
            
      - name: Run Unit Tests
        run: |
          xcodebuild test \
            -project OMOMoney.xcodeproj \
            -scheme OMOMoney \
            -destination 'platform=iOS Simulator,name=iPhone 15,OS=18.5' \
            -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
            -only-testing:OMOMoneyTests \
            -enableCodeCoverage YES \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO \
            | xcpretty
            
      - name: Generate Coverage Report
        run: |
          xcrun xccov view --report --json \
            ~/Library/Developer/Xcode/DerivedData/OMOMoney-*/Logs/Test/*.xcresult \
            > coverage.json
            
      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.json
          retention-days: 7
          
  # MARK: - Code Quality Check
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: quick-build
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install SwiftLint
        run: |
          brew install swiftlint
          
      - name: Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
          
      - name: Check File Sizes
        run: |
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./.git/*" -not -path "./.github/*" | head -10
          
      - name: Check for Secrets
        run: |
          echo "Checking for potential secrets..."
          if grep -r -i "password\|secret\|key\|token" . --exclude-dir=.git --exclude-dir=.github --exclude-dir=OMOMoney.xcodeproj; then
            echo "⚠️  Potential secrets found. Please review."
          else
            echo "✅ No obvious secrets found."
          fi
          
  # MARK: - Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    needs: quick-build
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for Vulnerable Dependencies
        run: |
          echo "Checking for known vulnerabilities..."
          # This would integrate with tools like Snyk or GitHub's dependency scanning
          echo "✅ Dependency check completed"
          
      - name: Check License Compliance
        run: |
          echo "Checking license compliance..."
          # This would check for license compatibility
          echo "✅ License check completed"
          
  # MARK: - PR Summary
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-build, unit-tests, code-quality, dependency-check]
    if: always()
    
    steps:
      - name: Generate PR Summary
        uses: actions/github-script@v6
        with:
          script: |
            const summary = `## 🔍 Pull Request Check Summary
            
            **Status:** ${needs.quick-build.result === 'success' && needs.unit-tests.result === 'success' && needs.code-quality.result === 'success' && needs.dependency-check.result === 'success' ? '✅ All Checks Passed' : '❌ Some Checks Failed'}
            
            **Build Status:**
            - 🏗️  Quick Build: ${needs.quick-build.result === 'success' ? '✅ Success' : '❌ Failed'}
            - 🧪 Unit Tests: ${needs.unit-tests.result === 'success' ? '✅ Success' : '❌ Failed'}
            - 📏 Code Quality: ${needs.code-quality.result === 'success' ? '✅ Success' : '❌ Failed'}
            - 📦 Dependencies: ${needs.dependency-check.result === 'success' ? '✅ Success' : '❌ Failed'}
            
            **Coverage:** Available in unit-tests artifacts
            
            **Next Steps:**
            ${needs.quick-build.result === 'success' && needs.unit-tests.result === 'success' && needs.code-quality.result === 'success' && needs.dependency-check.result === 'success' 
              ? '🚀 Ready for review and merge!' 
              : '🔧 Please fix the failing checks before merging.'}
            
            ---
            *Generated by GitHub Actions*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary,
            });
